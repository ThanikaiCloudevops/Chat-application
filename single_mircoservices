pipeline {
    agent{
        label "krazy22-staging"
    }
    tools {
        nodejs "nvm"
        jdk 'jdk-17'
    }
    environment {
        BITBUCKET_CREDENTIALS = "FSPAPI"
        SONAR_TOKEN = credentials("sonarscan")
        SCANNER_HOME = tool "sonarscanner-krazy"
        DOCKER_CREDENTIALS = credentials("dockercred")
        Image_Name = "contest-module"
    }
    stages {
        stage("Checkout SCM") {
            steps {
                script {
                    git(
                        branch: 'master',
                        credentialsId: "${BITBUCKET_CREDENTIALS}",
                        url: "https://SciflareIT@bitbucket.org/dpl11-backend/krazyy22_api.git"
                    )
                }
            }
        }
        stage("Version Check") {
            steps {
                script {
                    sh "node -v"
                    sh "docker --version"
                }
            }
        }
        stage("Static Code Analysis") {
            steps {
                script {
                    withSonarQubeEnv('sonarscan') { // Replace with your SonarQube instance name
                    sh '''
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.host.url=http://65.1.92.45:9000/ \
                        -Dsonar.login="${SONAR_TOKEN}" \
                        -Dsonar.projectKey=krazy22-staging \
                        -Dsonar.projectName=krazy22-staging \
                        -Dsonar.java.binaries=./
                    '''
                    }
                }
            }
        }
        stage("OWASP Dependency-Check") {
            steps {
                script {
                    dependencyCheck additionalArguments: '--scan ./ --out . --format XML', odcInstallation: 'dp-scan'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage("Build Docker image contest-module"){
            steps{
                script{
                    def buildId = "${env.BUILD_NUMBER}"
                    withDockerRegistry(credentialsId: 'dockercred', toolName: 'docker-kra'){
                        dir("/opt/jenkins/workspace/krazy22_staging/contests-module"){
                            sh "docker build -t ${Image_Name}:${buildId} ."
                            sh "docker push ${Image_Name}:${buildId} "
                        }
                    }
                }
            }
        }
    }    
}
