pipeline {
    agent {
        label "krazy22-dev"
    }
    tools {
        nodejs "nvm"
    }
    environment {
        BITBUCKET_CREDENTIALS = "FSPAPI"
        
    }
    stages{
        stage("Checkout SCM"){
            steps{
                script{
                    git (
                        branch: "master",url: "https://SciflareIT@bitbucket.org/dpl11-backend/krazyy22_api.git",
                        credentialsId: "${BITBUCKET_CREDENTIALS}"
                    )
                }
            }
        }
        stage("Version Check"){
            steps{
                script{
                    sh "node -v"
                    sh "docker --version"
                }
            }
        }
        stage("Cleanup Existing Old Containers and Images") {
            steps {
                script {
                    def containers = [
                        "contest-container", "cron-container", "Game-container", "master-data-container",
                        "scorecard-container", "user-auth-container", "user-container", 
                        "wallet-container", "Master-container"
                    ]
                    def hasContainers = false
                    def hasImages = false
                    // Check if any containers exist
                    containers.each { container ->
                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                            def exists = sh(script: "docker ps -aq --filter 'name=${container}\$'", returnStdout: true).trim()
                            echo "Container check for ${container}: ${exists}"
                            if (exists) {
                                hasContainers = true
                            }
                        }
                    }
                    // Check if the image exists
                    catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                        def imageExists = sh(script: "docker images -q sciflare/${params.Image_Name}:${env.BUILD_NUMBER}", returnStdout: true).trim()
                        echo "Image check for sciflare/${params.Image_Name}:${env.BUILD_NUMBER}: ${imageExists}"
                        if (imageExists) {
                            hasImages = true
                        }
                    }
                    // If no containers and no images, skip cleanup
                    if (!hasContainers && !hasImages) {
                        echo "No containers or old images to clean up. Skipping cleanup."
                    } else {
                        // Cleanup existing containers
                        containers.each { container ->
                            catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                                def exists = sh(script: "docker ps -aq --filter 'name=${container}\$'", returnStdout: true).trim()
                                if (exists) {
                                    sh "docker stop ${container} || true"
                                    sh "docker rm ${container} || true"
                                }
                            }
                        }
                        // Remove existing image if it exists
                        if (hasImages) {
                            catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                                sh "docker rmi sciflare/${params.Image_Name}:${env.BUILD_NUMBER} || true"
                            }
                        }
                    }
                }
            }
        }
        stage("Build Contests-Module and run container"){
            steps{
                script{
                    def build_Id="${env.BUILD_NUMBER}"
                    def containerName = "contest-container"
                    def Image_Name = "contests-module"
                    dir("/opt/jenkins/workspace/Krazy22_dev/contests-module"){
                        sh "docker build -t ${Image_Name}:${build_Id} ."
                        sh "docker run -d --name ${containerName} -p 5002:5002 ${Image_Name}:${env.BUILD_NUMBER}"
                    } 
                }
            }
        }
        stage("Build Cron-Module and run container"){
            steps{
                script{
                  def build_Id="${env.BUILD_NUMBER}"
                  def containerName = "cron-container"
                  def Image_Name = "cron-module"
                    dir("/opt/jenkins/workspace/Krazy22_dev/cron-module"){
                        sh "docker build -t ${Image_Name}:${build_Id} ."
                        sh "docker run -d --name ${containerName} -p 5100:5100 ${Image_Name}:${env.BUILD_NUMBER}"
                    } 
                }
            }
        }
        stage("Build Game-Module and run container"){
            steps{
                script{
                    def build_Id="${env.BUILD_NUMBER}"
                    def containerName = "Game-container"
                    def Image_Name = "game-module"
                    dir("/opt/jenkins/workspace/Krazy22_dev/game-module"){
                        sh "docker build -t ${Image_Name}:${build_Id} ."
                        sh "docker run -d --name ${containerName} -p 5001:5001 sciflare/${Image_Name}:${env.BUILD_NUMBER}"
                    } 
                }
            }
        }
        stage("Build Master-data-Module and run container"){
            steps{
                script{
                    def build_Id="${env.BUILD_NUMBER}"
                    def containerName = "master-data-container"
                    def Image_Name = "master-data-module"
                    dir("/opt/jenkins/workspace/Krazy22_dev/master-data-module"){
                        sh "docker build -t ${Image_Name}:${build_Id} ."
                        sh "docker run -d --name ${containerName} -p 5008:5008 sciflare/${Image_Name}:${env.BUILD_NUMBER}"
                    } 
                }
            }
        }
        stage("Build ScoreCard-Module and run container"){
            steps{
                script{
                    def build_Id="${env.BUILD_NUMBER}"
                    def containerName = "scorecard-container"
                    def Image_Name = "scorecard-module"
                    dir("/opt/jenkins/workspace/Krazy22_dev/scorcard-contest-module"){
                        sh "docker build -t ${Image_Name}:${build_Id} ."
                        sh "docker run -d --name ${containerName} -p 4000:4000 sciflare/${Image_Name}:${env.BUILD_NUMBER}"
                    } 
                }
            }
        }
        stage("Build User-auth-Modules and run Container"){
            steps{
                script{
                    def build_Id="${env.BUILD_NUMBER}"
                    def containerName = "user-auth-container"
                    def Image_Name = "user-auth-module"
                    dir("/opt/jenkins/workspace/Krazy22_dev/user-auth-module"){
                        sh "docker build -t ${Image_Name}:${build_Id} ."
                        sh "docker run -d --name ${containerName} -p 5000:5000 sciflare/${Image_Name}:${env.BUILD_NUMBER}"

                    }      
                }
            }
        }
        stage("Build User-Modules and run container"){
            steps{
                script{
                    def build_Id="${env.BUILD_NUMBER}"
                    def containerName = "user-container"
                    def Image_Name = "user-module"
                    dir("/opt/jenkins/workspace/Krazy22_dev/user-module"){
                        sh "docker build -t ${Image_Name}:${build_Id} ."
                        sh "docker run -d --name ${containerName} -p 5004:5004 sciflare/${Image_Name}:${env.BUILD_NUMBER}"

                    }      
                }
            }
        }
        stage("Build wallet-Module and run container"){
            steps{
                script{
                    def build_Id="${env.BUILD_NUMBER}"
                    def containerName = "wallet-container"
                    def Image_Name = "wallet-module"
                    dir("/opt/jenkins/workspace/Krazy22_dev/wallet-module"){
                        sh "docker build -t ${Image_Name}:${build_Id} ."
                        sh "docker run -d --name ${containerName} -p 5005:5005 sciflare/${Image_Name}:${env.BUILD_NUMBER}"

                    }      
                }
            }
        }
        stage("Build Master-Module and run containerr"){
            steps{
                script{
                    def build_Id="${env.BUILD_NUMBER}"
                    def containerName = "Master-container"
                    def Image_Name = "master-module"
                    dir("/opt/jenkins/workspace/Krazy22_dev/master-server"){
                        sh "docker build -t ${Image_Name}:${build_Id} ."
                        sh "docker run -d --name ${containerName} -p 3000:3000 sciflare/${Image_Name}:${env.BUILD_NUMBER}"
                    }      
                }
            }
        }
    }
}
